name: "CI-CD-Workflow-with-Helm"

on:
  # push:
  #   branches:
  #     - main

  workflow_dispatch:
    inputs:
      ImageVersion:
        description: 'Image Version :'     
        #required: true
    ### USAGE: ${{ github.event.inputs.ImageVersion }} ###
      
      HelmVersion:
        description: 'Helm Version :'     
        #required: true

      ClusterName:
        description: 'Cluster Name :'     
        required: true
        

env:
  CLUSTER_NAME: contoso-video
  RESOURCE_GROUP: mslearn-gh-pipelines-5163
  NAMESPACE: index-app-ns
  IMAGE_NAME: index-app
  HELM_RELEASE_NAME: index-app
  HELM_CHART_PATH: ./helm-charts/index-app
  APP_VERSION: 1.0.0-${{ github.sha }}
  HELM_CHART_VERSION: 1.0-${{ github.sha }}

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - name: "Checkout repository"
      uses: actions/checkout@master
    
    - uses: Azure/docker-login@v1
      with:
        login-server: ${{ secrets.ACR_URL }}
        username: ${{ secrets.ACR_USERNAME }}
        password: ${{ secrets.ACR_PASSWORD }}
    
    - name: "Build and push to container registry"
      run: |
        docker build . -t ${{ secrets.ACR_URL }}/${{env.IMAGE_NAME}}:${{ github.sha }}
        docker push ${{ secrets.ACR_URL }}/${{env.IMAGE_NAME}}:${{ github.sha }}

  deploy:
    needs: [build]
    uses: mehmetca-tr/demo-cd-wf-1/.github/workflows/cd-workflow.yml@main
    with:
      # CLUSTER_NAME: contoso-video
      CLUSTER_NAME: ${{ github.event.inputs.ClusterName }}
      RESOURCE_GROUP: mslearn-gh-pipelines-5163
      NAMESPACE: index-app-ns
      IMAGE_NAME: index-app
      HELM_RELEASE_NAME: index-app
      HELM_CHART_PATH: ./helm-charts/index-app
      APP_VERSION: 1.0.0-${{ github.sha }}
      HELM_CHART_VERSION: 1.0-${{ github.sha }}
    secrets:
      ACR_URL: ${{ secrets.ACR_URL }}
      ACR_USERNAME: ${{ secrets.ACR_USERNAME }}
      ACR_PASSWORD: ${{ secrets.ACR_PASSWORD }}
      AZURE_CREDENTIALS: ${{ secrets.AZURE_CREDENTIALS }}

# jobs:
#   call-workflow-passing-data:
#     uses: octo-org/example-repo/.github/workflows/workflow-B.yml@main
#     with:
#       username: mona
#     secrets:
#       token: ${{ secrets.TOKEN }}

  # deploy:
  #   needs: [build]
  #   runs-on: ubuntu-latest
  #   steps:
  #   - name: "Get code from github repo"
  #     uses: actions/checkout@master

  #   - name: "Set the target AKS cluster"
  #     uses: Azure/aks-set-context@v1
  #     with:
  #       creds: '${{ secrets.AZURE_CREDENTIALS }}'
  #       cluster-name: ${{ env.CLUSTER_NAME }}
  #       resource-group: ${{ env.RESOURCE_GROUP }}

  #   ### HELM COMMANDS

  #   - name: Install Helm
  #     uses: Azure/setup-helm@v1
  #     with:
  #       version: v3.8.0

  #   - name: Helm Dry Run
  #     run: |
  #       helm upgrade \
  #           --dry-run \
  #           --install \
  #           --create-namespace \
  #           --namespace ${{ env.NAMESPACE }} \
  #           --atomic \
  #           --wait \
  #           ${{ env.HELM_RELEASE_NAME }} \
  #           ${{ env.HELM_CHART_PATH }} \
  #           --set namespace=${{ env.NAMESPACE }} \
  #           --set image.repository=${{ secrets.ACR_URL }} \
  #           --set image.name=${{ env.IMAGE_NAME }} \
  #           --set image.tag=${{ github.sha }} 

  #   - name: Helm Package
  #     run: |
  #       helm package \
  #           --dependency-update \
  #           --app-version ${{ env.APP_VERSION }} \
  #           --version ${{ env.HELM_CHART_VERSION }} \
  #           ${{ env.HELM_CHART_PATH }}

  #   - name: Authenticate with the registry
  #     run: |
  #       helm registry login \
  #           ${{ secrets.ACR_URL }} \
  #           --username ${{ secrets.ACR_USERNAME }} \
  #           --password ${{ secrets.ACR_PASSWORD }}

  #   - name: Push chart to registry as OCI artifact
  #     run: |
  #       helm push \
  #       ${{ env.HELM_RELEASE_NAME }}-${{ env.HELM_CHART_VERSION }}.tgz \
  #       oci://${{ secrets.ACR_URL }}/helm

  #   - name: Install / Upgrade helm chart
  #     run: |
  #       helm upgrade \
  #           --install \
  #           --create-namespace \
  #           --namespace ${{ env.NAMESPACE }} \
  #           --atomic \
  #           --wait \
  #           ${{ env.HELM_RELEASE_NAME }} \
  #           oci://${{ secrets.ACR_URL }}/helm/${{ env.HELM_RELEASE_NAME }} --version ${{ env.HELM_CHART_VERSION }} \
  #           --set namespace=${{ env.NAMESPACE }} \
  #           --set image.repository=${{ secrets.ACR_URL }} \
  #           --set image.name=${{ env.IMAGE_NAME }} \
  #           --set image.tag=${{ github.sha }} 